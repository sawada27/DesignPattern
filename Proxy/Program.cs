namespace Proxy
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /* 代理模式   行为型模式 最常用发布订阅中间件都是这个类型

            适用场景：
            延迟加载： 当创建和初始化一个对象的代价很高，而且不总是需要时，可以使用代理模式实现延迟加载。
            访问控制： 当需要对对象的访问进行控制时，可以使用代理模式进行权限控制。
            日志记录： 代理模式可以用于记录对象的操作，例如日志记录。

            优点：
            延迟加载（Lazy Loading）： 代理模式允许在需要时才创建和加载实际对象，这对于大对象或耗时对象的延迟加载是有益的。
            权限控制： 代理可以用于控制对实际对象的访问权限，例如，只有特定用户有权访问某个对象。
            减少资源消耗： 当某个对象的创建和初始化代价很高时，代理模式可以在必要的时候才创建实际对象，从而减少资源消耗。

            缺点:
            复杂性增加： 引入代理类可能会增加系统的复杂性，特别是在涉及多个代理层的情况下。
            性能问题： 如果频繁创建和销毁代理对象，可能会影响性能。

            速记：Lazy<T> 
   */


            var loader = new ProxyLoader("a.jpg");

            loader.Load();

            Console.ReadLine(); 


        }
    }
}